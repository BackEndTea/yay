--TEST--
Primitive union return types
--FILE--
<?php

macro ·unsafe {
    // this doesn't work with scalars yet
    // a more procedural macro construct would be necessary
    function T_STRING·name (···args)
        ·optional
        (
            ·chain
            (
                ·token(':'),
                ·ls
                (
                    ·ns()·type,
                    ·token('|')
                )
                ·union
            )
            ·return_type
        )
    {
        ···body
    }
} >> {
    function T_STRING·name (···args)
    {
        $ret = (function(···args){
            ···body
        })(...function_get_args());

        if (
            ·return_type ··· { ·union ··· {
            ! $ret instanceof ·type &&
            }}
            true
        ) {
            throw new TypeError("Some fancy type Error");
        }

        return $ret;
    }
}

class Foo {
    function bar(bool $x) : A|Foo\B|\Foo\Bar\C {
        if ($x) {
            return new Z;
        } else {
            return new A;
        }
    }
}

?>
--EXPECTF--
<?php

class Foo {
    function bar (bool $x)
    {
        $ret = (function(bool $x){
            if ($x) {
            return new Z;
        } else {
            return new A;
        }
    
        })(...function_get_args());

        if (
            ! $ret instanceof A &&
            ! $ret instanceof Foo\B &&
            ! $ret instanceof \Foo\Bar\C &&
            
            true
        ) {
            throw new TypeError("Some fancy type Error");
        }

        return $ret;
    }
}

?>
