<?php

return [
    __LINE__ => '1',
    __LINE__ => '-1',
    __LINE__ => '+1',
    __LINE__ => '1 ** 1',
    __LINE__ => '1 - - 1', // not the same as 1 -- 1
    __LINE__ => '$var',
    __LINE__ => '$$varvar',
    __LINE__ => '$$$$varvar',
    __LINE__ => '${1}',
    __LINE__ => '${varname}',
    __LINE__ => '${$foo}',
    __LINE__ => '${$$varvar}',
    __LINE__ => '(1)',
    __LINE__ => '($var)',
    __LINE__ => '($$$$varvar)',
    __LINE__ => '(((1)))',
    __LINE__ => '((($var)))',
    __LINE__ => '((((($$$$varvar)))))',
    __LINE__ => '1 + 1',
    __LINE__ => '1 + 1 + 1',
    __LINE__ => '1 + +1 + -1',
    __LINE__ => '(1 + 1)',
    __LINE__ => '(1 + (1))',
    __LINE__ => '(array) $var',
    __LINE__ => '(array) (array) $var',
    __LINE__ => '(array) (1 + $a + $b + ($c + ($d)))',
    __LINE__ => '1 * 1 +  $var + 1 + (1 + 1 + ((($var))))',
    __LINE__ => '--$var',
    __LINE__ => '++$var',
    __LINE__ => '1 + ++$var',
    __LINE__ => '1 - ++$var',
    __LINE__ => '--1 + --$var',
    __LINE__ => '--1 - --$var - --1 + ++1',
    __LINE__ => '@$e',
    __LINE__ => '--$e',
    __LINE__ => '++$e',
    __LINE__ => '$e++',
    __LINE__ => '$e--',
    __LINE__ => '$a-- + --$e',
    __LINE__ => '--$a + --$e',
    __LINE__ => '$a++ + $e--',
    __LINE__ => '- ++$var',
    __LINE__ => '[] + []',
    __LINE__ => '+ --$var',
    __LINE__ => '(int) $e',
    __LINE__ => '(int) ($e)',
    __LINE__ => 'true && false && !true',
    __LINE__ => '@$var',
    __LINE__ => '@$var--',
    __LINE__ => '@$var++',
    // constant        
    __LINE__ => 'Foo',
    __LINE__ => '\Foo',
    __LINE__ => '\Foo\Bar\Baz',
    __LINE__ => '\Foo\Bar\Baz::test',
    __LINE__ => '\Foo\Bar\Baz::test',
    __LINE__ => 'self::test',
    __LINE__ => 'static::test',
    __LINE__ => 'namespace\Foo',
    __LINE__ => 'namespace\Foo::BAR["baz"]',
    __LINE__ => 'test::class',
    // static member      
    __LINE__ => 'Foo::$var',
    __LINE__ => '\Foo::$bar',
    __LINE__ => '\Foo\Bar\Baz::$baz',
    __LINE__ => '\Foo\Bar\Baz::$x',
    __LINE__ => '\Foo\Bar\Baz::$y',
    __LINE__ => 'self::$test',
    __LINE__ => 'static::$test',
    __LINE__ => 'namespace\Foo::$test',
    __LINE__ => 'test::$class["bar"]::baz',
    __LINE__ => 'test::$class::baz',
    __LINE__ => 'test::$class()::baz',
    __LINE__ => 'test::$class::baz()',
    // __LINE__ => 'test::$class(new class{})::baz(1, 2, 3)',
    // yield
    __LINE__ => 'yield 1 + 1',
    __LINE__ => 'yield',
    __LINE__ => 'yield yield',
    __LINE__ => 'yield yield yield',
    __LINE__ => 'yield yield yield yield 1',
    __LINE__ => 'yield yield from yield yield',
    __LINE__ => 'yield yield from yield yield 1 + 1',
    __LINE__ => 'yield yield from yield yield 1 + 1 + 1',
    __LINE__ => 'yield 1',
    __LINE__ => 'yield 1 * 1 + $var',
    __LINE__ => 'yield ${$var}',
    __LINE__ => 'yield constant',
    __LINE__ => 'yield 1 => (2)',
    __LINE__ => 'yield 1 => 1 * 1 + $var',
    __LINE__ => 'yield $var',
    __LINE__ => 'yield from $var',
    __LINE__ => 'yield from (1 * 1 + $var)',
    __LINE__ => 'yield from 1 * 1 + $var',
    __LINE__ => 'yield 1 + yield 2 + 1 + 1 <=> $var',
    __LINE__ => 'yield 1 + yield 2 /* comment */ + 1 /* comment */ + 1 /* comment */ <=> $var',
    // coallesce
    __LINE__ => '1 ?? 2',
    __LINE__ => '["0", "1",][3] ?? ["0", "1",][true][false] ?? ["0", "1",][false]',
    // ternary
    __LINE__ => '$var ?: 1',
    __LINE__ => '$var++ ?: $var--',
    __LINE__ => '--$var ?: --$var',
    __LINE__ => '$var ?: $var ?: 1',
    __LINE__ => '$var ? $var + 1 : 1',
    __LINE__ => '$var ? $var : $var ?: 1',
    __LINE__ => '--$var ? $var++ + 1 : 1',
    __LINE__ => '$var++ ? $var++ + 1 : 1',
    //
    __LINE__ => '"foo $bar $baz"',
    __LINE__ => '"foo ${bar} {$baz} $boo {$foo->bar->baz} {$foo->bar->baz()} {$foo->bar()->baz()}"',
    __LINE__ => '"foo $foo->bar->baz->bar $foo->bar(1, 2, 3)->baz->bar()->biz $foo"',
    __LINE__ => "'foo' . 'bar'",
    __LINE__ => '"foo {$bar} " . "bar"',
    __LINE__ => '$foo instanceof Bar',
    __LINE__ => '$foo instanceof \Bar',
    __LINE__ => '$foo instanceof Foo\Bar\Baz',
    __LINE__ => '$foo instanceof \Foo\Baz\Baz',
    __LINE__ => '$foo instanceof $bar',
    __LINE__ => '$foo->bar',
    __LINE__ => '@$foo->bar->baz',
    __LINE__ => '--$foo->bar->baz++',
    __LINE__ => '$foo->bar->baz',
    __LINE__ => '$foo->bar->baz->biz->boz',
    __LINE__ => '$foo->bar()',
    __LINE__ => '$foo->$bar->baz()',
    __LINE__ => '$foo->bar->baz()',
    __LINE__ => '$foo->bar()->baz',
    __LINE__ => '$foo->bar(1)',
    __LINE__ => '$foo->bar(1)->baz()->biz(1, 2)->boz',
    __LINE__ => '$foo->bar(1)->baz()->biz(1, 2, ...[$foo, $bar])->boz',
    __LINE__ => '($foo->bar->baz)()',
    __LINE__ => '(((($foo->bar)->baz)()))',
    __LINE__ => '(($foo->bar)->baz)(1, 2, 3)',
    __LINE__ => '($foo->bar)->baz',
    __LINE__ => '(string) $foo->bar->baz(1+1)',
    __LINE__ => '(string) $foo->bar->baz((1+1))',
    __LINE__ => '(string) $foo->bar->baz(((1+1)))',
    __LINE__ => '(string) $foo->bar->baz($foo, 1, 1+1)',
    __LINE__ => '($foo->bar->baz)',
    __LINE__ => '($foo->bar()->baz)',
    __LINE__ => '$foo->bar(++$foo)->baz',
    __LINE__ => '$foo->bar(new Foo)->baz',
    __LINE__ => '($foo->bar(new class{})->baz)',
    __LINE__ => '($foo->bar()->baz())',
    __LINE__ => '$foo->bar()->baz() = 1',
    __LINE__ => 'foo() = 1',
    __LINE__ => 'bar()->baz',
    __LINE__ => 'bar()->baz()',
    __LINE__ => '($foo)()',
    __LINE__ => '(object) $foo()',
    __LINE__ => 'bar()',
    __LINE__ => '$this()',
    __LINE__ => 'function(){}',
    __LINE__ => '(function(){})',
    __LINE__ => '(function(){})()',
    __LINE__ => '(function(){})()()',
    __LINE__ => '(static function() use($x) :x {})()',
    __LINE__ => '1 + print 1',
    // array
    __LINE__ => '[]',
    __LINE__ => '(((([]))))',
    __LINE__ => '[1, 2, 3, 4, 5]',
    __LINE__ => '[[], 1, [1, []]]',
    __LINE__ => '[[], (((1))), [((1)), []]]',
    __LINE__ => '[function(){}]',
    __LINE__ => '[(function(){})(), foo]',
    __LINE__ => '[[] => []]',
    __LINE__ => '["foo" => 1, 2, 5 => 3, 4, (((10 * 100))) => (string) 5]',
    __LINE__ => '["foo"]',
    __LINE__ => '[1 + 2]',
    __LINE__ => '["foo" => 1]',
    __LINE__ => '["foo" => 1 + 2]',
    __LINE__ => '["foo" => 1, "bar" => 3]',
    __LINE__ => '((([(function(){})() => [], 1, [function(){}, \'closure\' => function(){ return [];}]])))',
    __LINE__ => 'array()',
    __LINE__ => '((((array([array()])))))',
    __LINE__ => 'array(1, 2, 3, 4, 5)',
    __LINE__ => 'array([], 1, [1, array()])',
    __LINE__ => 'array([], (((1))), array(((1)), array()))',
    __LINE__ => 'array(function(){})',
    __LINE__ => 'array((function(){})(), foo)',
    __LINE__ => 'array(array() => array())',
    __LINE__ => 'array("foo" => 1, 2, 5 => 3, 4, (((10 * 100))) => (string) 5)',
    __LINE__ => '(((array((function(){})() => [], 1, [function(){}, \'closure\' => function(){ return [];}]))))',
    __LINE__ => '$foo->bar["baz"]',
    __LINE__ => '$foo->bar["baz"]->bar->baz(1, 2, 3)',
    __LINE__ => '$foo->bar()->baz->biz()->bar()["baz"]->foo',
    __LINE__ => '$foo = &$foo->bar["baz"]',
    __LINE__ => '"foo ${($bar)[1]}" . "bar"',

    // new expression
    __LINE__ => 'new Bar()',
    __LINE__ => 'new \Foo()',
    __LINE__ => 'new Foo\Bar()',
    __LINE__ => 'new \Foo\Bar\Baz()',
    __LINE__ => 'new $var()',
    __LINE__ => 'new class {}',
    __LINE__ => 'new class extends Bar {}',
    __LINE__ => 'new class extends \Foo {}',
    __LINE__ => 'new class extends Foo\Bar {}',
    __LINE__ => 'new class extends \Foo\Bar\Baz {}',
    __LINE__ => 'new class implements Bar, \Foo, Foo\Bar, \Foo\Bar\Baz {}',

    // should not pass but YOLO!
    __LINE__ => 'new ($var)()',
    __LINE__ => '($foo->bar) = 1',
    __LINE__ => '($foo->bar) = &1',
    __LINE__ => '1 = &1',
    __LINE__ => '1 = 1',
    __LINE__ => '1 ** 3 > 3 > 1',
];
